openapi: 3.0.3
info:
  title: ALGOPACK
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    
  contact:
    email: algopack@moex.com
  version: 1.0.11
servers:
  - url: https://apim.moex.com
  - url: https://passport.moex.com

tags:
  - name: Auth
    description: basic authentication query

  - name: SuperCandles
    description: All about SuperCandles


  
paths:
  /authenticate:
    get:
      tags:
        - Auth
      summary: auth bla bla bla
      description: Multiple status values can be provided with comma separated strings
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - basicAuth: []  # <-- use the same name here



  /iss/analyticalproducts/futoi/securities.jsonp:
    get:
      tags:
        - SuperCandles
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  #$ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - basicAuth: []  # <-- use the same name here

  /pet/findByTags:
    get:
      tags:
        - SuperCandles
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - basic_auth:
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - SuperCandles
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - basic_auth:
            - read:pets
    
    
components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: https
      scheme: basic
